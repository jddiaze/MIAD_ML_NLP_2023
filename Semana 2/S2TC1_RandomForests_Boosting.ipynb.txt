{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "26mk2UOO-G77"
      },
      "source": [
        "![image info](https://raw.githubusercontent.com/albahnsen/MIAD_ML_and_NLP/main/images/banner_1.png)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6ZzyEW7f-G8F"
      },
      "source": [
        "# Taller: Construcción e implementación de modelos Bagging, Random Forest y XGBoost\n",
        "\n",
        "En este taller podrán poner en práctica sus conocimientos sobre la construcción e implementación de modelos de Bagging, Random Forest y XGBoost. El taller está constituido por 8 puntos, en los cuales deberan seguir las intrucciones de cada numeral para su desarrollo."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "725VDNAx-G8H"
      },
      "source": [
        "## Datos predicción precio de automóviles\n",
        "\n",
        "En este taller se usará el conjunto de datos de Car Listings de Kaggle donde cada observación representa el precio de un automóvil teniendo en cuenta distintas variables como año, marca, modelo, entre otras. El objetivo es predecir el precio del automóvil. Para más detalles puede visitar el siguiente enlace: [datos](https://www.kaggle.com/jpayne/852k-used-car-listings)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Xq57RLld-G8J"
      },
      "outputs": [],
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hlMsOA5T-G8M",
        "outputId": "ba16e526-2f2e-452b-f3c9-20bee1654bce"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Price  Year  Mileage  M_Camry  M_Camry4dr  M_CamryBase  M_CamryL  \\\n",
              "7    21995  2014     6480        0           0            0         1   \n",
              "11   13995  2014    39972        0           0            0         0   \n",
              "167  17941  2016    18989        0           0            0         0   \n",
              "225  12493  2014    51330        0           0            0         1   \n",
              "270   7994  2007   116065        0           1            0         0   \n",
              "\n",
              "     M_CamryLE  M_CamrySE  M_CamryXLE  \n",
              "7            0          0           0  \n",
              "11           1          0           0  \n",
              "167          0          1           0  \n",
              "225          0          0           0  \n",
              "270          0          0           0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0000fe89-16b0-4954-a9c1-5cd76705b0a6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Year</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>M_Camry</th>\n",
              "      <th>M_Camry4dr</th>\n",
              "      <th>M_CamryBase</th>\n",
              "      <th>M_CamryL</th>\n",
              "      <th>M_CamryLE</th>\n",
              "      <th>M_CamrySE</th>\n",
              "      <th>M_CamryXLE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>21995</td>\n",
              "      <td>2014</td>\n",
              "      <td>6480</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>13995</td>\n",
              "      <td>2014</td>\n",
              "      <td>39972</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>167</th>\n",
              "      <td>17941</td>\n",
              "      <td>2016</td>\n",
              "      <td>18989</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>225</th>\n",
              "      <td>12493</td>\n",
              "      <td>2014</td>\n",
              "      <td>51330</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270</th>\n",
              "      <td>7994</td>\n",
              "      <td>2007</td>\n",
              "      <td>116065</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0000fe89-16b0-4954-a9c1-5cd76705b0a6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0000fe89-16b0-4954-a9c1-5cd76705b0a6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0000fe89-16b0-4954-a9c1-5cd76705b0a6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "# Importación de librerías\n",
        "%matplotlib inline\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import math\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "\n",
        "# Lectura de la información de archivo .csv\n",
        "data = pd.read_csv('https://raw.githubusercontent.com/albahnsen/MIAD_ML_and_NLP/main/datasets/dataTrain_carListings.zip')\n",
        "\n",
        "# Preprocesamiento de datos para el taller\n",
        "data = data.loc[data['Model'].str.contains('Camry')].drop(['Make', 'State'], axis=1)\n",
        "data = data.join(pd.get_dummies(data['Model'], prefix='M'))\n",
        "data = data.drop(['Model'], axis=1)\n",
        "\n",
        "# Visualización dataset\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yu60Hzs9-G8O"
      },
      "outputs": [],
      "source": [
        "# Separación de variables predictoras (X) y variable de interés (y)\n",
        "y = data['Price']\n",
        "X = data.drop(['Price'], axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pdpnwdMN-G8P"
      },
      "outputs": [],
      "source": [
        "# Separación de datos en set de entrenamiento y test\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Separación de datos en set de entrenamiento y test para el bagging manual\n",
        "from sklearn.model_selection import train_test_split\n",
        "train_bagging, test_bagging = train_test_split(data, test_size=0.33, random_state=42)"
      ],
      "metadata": {
        "id": "c4xsMaZwN6xT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IrW9d6fw-G8R"
      },
      "source": [
        "### Punto 1 - Árbol de decisión manual\n",
        "\n",
        "En la celda 1 creen un árbol de decisión **manualmente**  que considere los set de entrenamiento y test definidos anteriormente y presenten el RMSE y MAE del modelo en el set de test."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V71JfQJJ-G8S"
      },
      "outputs": [],
      "source": [
        "# Celda 1\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Definir parametros y criterios de parada\n",
        "max_depth = None\n",
        "num_pct = 10\n",
        "max_features = None\n",
        "min_gain=0.001"
      ],
      "metadata": {
        "id": "e6nNTkMZ-sw1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Impresión variable a usar (Mileage)\n",
        "j = 1\n",
        "print(X.columns[j])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1k_Rgk-KDG5H",
        "outputId": "5d4c60b2-cced-4ecc-d216-a50494b5e8ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mileage\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# División de la variable Mileage en num_ctp puntos (parámetro definido anteriormente) para obtener posibles puntos de corte\n",
        "splits = np.percentile(X.iloc[:, j], np.arange(0, 100, 100.0 / num_pct).tolist())\n",
        "splits = np.unique(splits)\n",
        "splits\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I1cgQIDE-s41",
        "outputId": "fd31b428-8ccd-48b5-90e6-3898311597f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5.000000e+00, 1.576440e+04, 2.345860e+04, 2.993760e+04,\n",
              "       3.570080e+04, 4.168000e+04, 4.824700e+04, 6.171600e+04,\n",
              "       8.153420e+04, 1.067578e+05])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# División de las observaciones usando el punto de corte en la posición 5 de la lista de splits\n",
        "k=5\n",
        "filter_l = X.iloc[:, j] < splits[k]\n",
        "\n",
        "# División de la variable de respuesta de acuerdo a si la observación cumple o no con la regla binaria\n",
        "# y_l: la observación tiene un valor menor al punto de corte seleccionado\n",
        "# y_r: la observación tiene un valor mayor o igual al punto de corte seleccionado\n",
        "y_l = y.loc[filter_l]\n",
        "y_r = y.loc[~filter_l]"
      ],
      "metadata": {
        "id": "nkgFHR37-s-q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Definición de la función que calcula el gini index\n",
        "def gini(y):\n",
        "    if y.shape[0] == 0:\n",
        "        return 0\n",
        "    else:\n",
        "        return 1 - (y.mean()**2 + (1 - y.mean())**2)"
      ],
      "metadata": {
        "id": "CtS1VBA9-tBa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Gini index de las observaciones que tienen un valor menor al punto de corte seleccionado\n",
        "gini_l = gini(y_l)\n",
        "gini_l"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PDaY3Jod_vW_",
        "outputId": "e4ba162b-e8d6-410f-823e-5ed4ea778cc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-584221909.9546928"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gini index de las observaciones que tienen un valor mayor o igual al punto de corte seleccionado\n",
        "gini_r = gini(y_r)\n",
        "gini_r"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DeZaewKT_0PM",
        "outputId": "498913dc-a67c-458c-bfd6-1b3bd8ddc57f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-287282376.9689342"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Definición de la función gini_imputiry para calular la ganancia de una variable predictora j dado el punto de corte k\n",
        "def gini_impurity(X_col, y, split):\n",
        "    \n",
        "    filter_l = X_col < split\n",
        "    y_l = y.loc[filter_l]\n",
        "    y_r = y.loc[~filter_l]\n",
        "    \n",
        "    n_l = y_l.shape[0]\n",
        "    n_r = y_r.shape[0]\n",
        "    \n",
        "    gini_y = gini(y)\n",
        "    gini_l = gini(y_l)\n",
        "    gini_r = gini(y_r)\n",
        "    \n",
        "    gini_impurity_ = gini_y - (n_l / (n_l + n_r) * gini_l + n_r / (n_l + n_r) * gini_r)\n",
        "    \n",
        "    return gini_impurity_\n",
        "  "
      ],
      "metadata": {
        "id": "znBvKYANC2ky"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ganancia de la variable 'Mileage' en el punto de corte selecionado\n",
        "gini_impurity(X.iloc[:, j], y, splits[k])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V2eFyK2yC8ba",
        "outputId": "14d56737-2668-4c4e-af43-6ffe9da5e0f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13036708.332934737"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Definición de la función best_split para calcular cuál es la mejor variable y punto de cortepara hacer la bifurcación del árbol\n",
        "def best_split(X, y, num_pct=10):\n",
        "    \n",
        "    features = range(X.shape[1])\n",
        "    \n",
        "    best_split = [0, 0, 0]  # j, split, gain\n",
        "    \n",
        "    # Para todas las varibles \n",
        "    for j in features:\n",
        "        \n",
        "        splits = np.percentile(X.iloc[:, j], np.arange(0, 100, 100.0 / (num_pct+1)).tolist())\n",
        "        splits = np.unique(splits)[1:]\n",
        "        \n",
        "        # Para cada partición\n",
        "        for split in splits:\n",
        "            gain = gini_impurity(X.iloc[:, j], y, split)\n",
        "                        \n",
        "            if gain > best_split[2]:\n",
        "                best_split = [j, split, gain]\n",
        "    \n",
        "    return best_split"
      ],
      "metadata": {
        "id": "YEEmSC2RDkaM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Obtención de la variable 'j', su punto de corte 'split' y su ganancia 'gain'\n",
        "j, split, gain = best_split(X, y, 5)\n",
        "j, split, gain"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CDRbTvC2DqCu",
        "outputId": "20834c23-31fd-496d-8c2e-0ff84b7df9d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0, 2014.0, 17349239.621991813)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# División de las observaciones usando la mejor variable 'j' y su punto de corte 'split'\n",
        "filter_l = X.iloc[:, j] < split\n",
        "\n",
        "y_l = y.loc[filter_l]\n",
        "y_r = y.loc[~filter_l]"
      ],
      "metadata": {
        "id": "Pm48XUlMDviJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y.shape[0], y_l.shape[0], y_r.shape[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ANy-mTD6Dx8e",
        "outputId": "839befaf-a32a-4bba-e116-cf6cd390fe9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10495, 3356, 7139)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y.mean(), y_l.mean(), y_r.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I5HwfocDDyj8",
        "outputId": "83cc1796-1550-4131-8613-d8b422c0e379"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(14538.403716055265, 10242.713647199047, 16557.781201848997)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Definición de la función tree_grow para hacer un crecimiento recursivo del árbol\n",
        "def tree_grow(X, y, level=0, min_gain=0.001, max_depth=None, num_pct=10):\n",
        "    \n",
        "    # Si solo es una observación\n",
        "    if X.shape[0] == 1:\n",
        "        tree = dict(y_pred=y.iloc[:1].values[0], y_prob=0.5, level=level, split=-1, n_samples=1, gain=0)\n",
        "        return tree\n",
        "    \n",
        "    # Calcular la mejor división\n",
        "    j, split, gain = best_split(X, y, num_pct)\n",
        "    \n",
        "    # Guardar el árbol y estimar la predicción\n",
        "    y_pred = int(y.mean() >= 0.5) \n",
        "    y_prob = (y.sum() + 1.0) / (y.shape[0] + 2.0)  # Corrección Laplace \n",
        "    \n",
        "    tree = dict(y_pred=y_pred, y_prob=y_prob, level=level, split=-1, n_samples=X.shape[0], gain=gain)\n",
        "    # Revisar el criterio de parada \n",
        "    if gain < min_gain:\n",
        "        return tree\n",
        "    if max_depth is not None:\n",
        "        if level >= max_depth:\n",
        "            return tree   \n",
        "    \n",
        "    # Continuar creando la partición\n",
        "    filter_l = X.iloc[:, j] < split\n",
        "    X_l, y_l = X.loc[filter_l], y.loc[filter_l]\n",
        "    X_r, y_r = X.loc[~filter_l], y.loc[~filter_l]\n",
        "    tree['split'] = [j, split]\n",
        "\n",
        "    # Siguiente iteración para cada partición\n",
        "    \n",
        "    tree['sl'] = tree_grow(X_l, y_l, level + 1, min_gain=min_gain, max_depth=max_depth, num_pct=num_pct)\n",
        "    tree['sr'] = tree_grow(X_r, y_r, level + 1, min_gain=min_gain, max_depth=max_depth, num_pct=num_pct)\n",
        "    \n",
        "    return tree"
      ],
      "metadata": {
        "id": "iD-g05ZID3XP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Aplicación de la función tree_grow\n",
        "tree_grow(X, y, level=0, min_gain=0.001, max_depth=1, num_pct=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lsYSdawWD4y0",
        "outputId": "c5fa1e15-f0a5-4eb8-f352-2db814019afa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'y_pred': 1,\n",
              " 'y_prob': 14535.633800133372,\n",
              " 'level': 0,\n",
              " 'split': [0, 2014.0],\n",
              " 'n_samples': 10495,\n",
              " 'gain': 17349239.621991813,\n",
              " 'sl': {'y_pred': 1,\n",
              "  'y_prob': 10236.613460393091,\n",
              "  'level': 1,\n",
              "  'split': -1,\n",
              "  'n_samples': 3356,\n",
              "  'gain': 7787930.328242004},\n",
              " 'sr': {'y_pred': 1,\n",
              "  'y_prob': 16553.143957428932,\n",
              "  'level': 1,\n",
              "  'split': -1,\n",
              "  'n_samples': 7139,\n",
              "  'gain': 3024805.47488904}}"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tree = tree_grow(X_train, y_train, level=0, min_gain=0.001, max_depth=3, num_pct=10)\n",
        "tree"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0fAoSPa-D8Ss",
        "outputId": "3b439bc1-7982-442f-c239-cf317f45ded5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'y_pred': 1,\n",
              " 'y_prob': 14503.947817432107,\n",
              " 'level': 0,\n",
              " 'split': [0, 2014.0],\n",
              " 'n_samples': 7031,\n",
              " 'gain': 17412158.538160443,\n",
              " 'sl': {'y_pred': 1,\n",
              "  'y_prob': 10225.920774647888,\n",
              "  'level': 1,\n",
              "  'split': [0, 2012.0],\n",
              "  'n_samples': 2270,\n",
              "  'gain': 8039318.299921066,\n",
              "  'sl': {'y_pred': 1,\n",
              "   'y_prob': 8725.304318026045,\n",
              "   'level': 2,\n",
              "   'split': [1, 97798.72727272728],\n",
              "   'n_samples': 1457,\n",
              "   'gain': 2218560.9485784173,\n",
              "   'sl': {'y_pred': 1,\n",
              "    'y_prob': 9861.673192771084,\n",
              "    'level': 3,\n",
              "    'split': -1,\n",
              "    'n_samples': 662,\n",
              "    'gain': 1805269.9185358882},\n",
              "   'sr': {'y_pred': 1,\n",
              "    'y_prob': 7756.673776662485,\n",
              "    'level': 3,\n",
              "    'split': -1,\n",
              "    'n_samples': 795,\n",
              "    'gain': 1238287.4041553736}},\n",
              "  'sr': {'y_pred': 1,\n",
              "   'y_prob': 12887.20736196319,\n",
              "   'level': 2,\n",
              "   'split': [1, 73300.81818181818],\n",
              "   'n_samples': 813,\n",
              "   'gain': 2615740.375015855,\n",
              "   'sl': {'y_pred': 1,\n",
              "    'y_prob': 13901.30786516854,\n",
              "    'level': 3,\n",
              "    'split': -1,\n",
              "    'n_samples': 443,\n",
              "    'gain': 942735.5531387925},\n",
              "   'sr': {'y_pred': 1,\n",
              "    'y_prob': 11604.819892473119,\n",
              "    'level': 3,\n",
              "    'split': -1,\n",
              "    'n_samples': 370,\n",
              "    'gain': 1266196.439209044}}},\n",
              " 'sr': {'y_pred': 1,\n",
              "  'y_prob': 16538.520680243542,\n",
              "  'level': 1,\n",
              "  'split': [0, 2017.0],\n",
              "  'n_samples': 4761,\n",
              "  'gain': 3048776.3917423487,\n",
              "  'sl': {'y_pred': 1,\n",
              "   'y_prob': 15967.93584521385,\n",
              "   'level': 2,\n",
              "   'split': [1, 38129.18181818181],\n",
              "   'n_samples': 3926,\n",
              "   'gain': 1272188.545149386,\n",
              "   'sl': {'y_pred': 1,\n",
              "    'y_prob': 16688.715818945402,\n",
              "    'level': 3,\n",
              "    'split': -1,\n",
              "    'n_samples': 2141,\n",
              "    'gain': 787443.0199553967},\n",
              "   'sr': {'y_pred': 1,\n",
              "    'y_prob': 15085.693900391718,\n",
              "    'level': 3,\n",
              "    'split': -1,\n",
              "    'n_samples': 1785,\n",
              "    'gain': 912925.7428934574}},\n",
              "  'sr': {'y_pred': 1,\n",
              "   'y_prob': 19176.729988052568,\n",
              "   'level': 2,\n",
              "   'split': [8, 1.0],\n",
              "   'n_samples': 835,\n",
              "   'gain': 2187265.7136490345,\n",
              "   'sl': {'y_pred': 1,\n",
              "    'y_prob': 18746.126564673155,\n",
              "    'level': 3,\n",
              "    'split': -1,\n",
              "    'n_samples': 717,\n",
              "    'gain': 1251868.4860451221},\n",
              "   'sr': {'y_pred': 1,\n",
              "    'y_prob': 21437.158333333333,\n",
              "    'level': 3,\n",
              "    'split': -1,\n",
              "    'n_samples': 118,\n",
              "    'gain': 1754914.7224709988}}}}"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Definición de la función tree_predict para hacer predicciones según las variables 'X' y el árbol 'tree'\n",
        "\n",
        "def tree_predict(X, tree, proba=False):\n",
        "    \n",
        "    predicted = np.ones(X.shape[0])\n",
        "\n",
        "    # Revisar si es el nodo final\n",
        "    if tree['split'] == -1:\n",
        "        if not proba:\n",
        "            predicted = predicted * tree['y_pred']\n",
        "        else:\n",
        "            predicted = predicted * tree['y_prob']\n",
        "            \n",
        "    else:\n",
        "        \n",
        "        j, split = tree['split']\n",
        "        filter_l = (X.iloc[:, j] < split)\n",
        "        X_l = X.loc[filter_l]\n",
        "        X_r = X.loc[~filter_l]\n",
        "\n",
        "        if X_l.shape[0] == 0:  # Si el nodo izquierdo está vacio solo continua con el derecho \n",
        "            predicted[~filter_l] = tree_predict(X_r, tree['sr'], proba)\n",
        "        elif X_r.shape[0] == 0:  #  Si el nodo derecho está vacio solo continua con el izquierdo\n",
        "            predicted[filter_l] = tree_predict(X_l, tree['sl'], proba)\n",
        "        else:\n",
        "            predicted[filter_l] = tree_predict(X_l, tree['sl'], proba)\n",
        "            predicted[~filter_l] = tree_predict(X_r, tree['sr'], proba)\n",
        "\n",
        "    return predicted"
      ],
      "metadata": {
        "id": "aj3-RzqkEBq3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ejecución de función tree_predict\n",
        "y_train_pred = tree_predict(X_train, tree)\n",
        "y_test_pred = tree_predict(X_test, tree)"
      ],
      "metadata": {
        "id": "nl6_z4HwEDaJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def RMSE (real, pred): \n",
        "  MSE = np.square(np.subtract(real, pred)).mean()\n",
        "  RMSE = math.sqrt(MSE)\n",
        "  return f\"El RMSE para el modelo es de: {RMSE}\"\n",
        "def MAE (real, pred):\n",
        "  MAE = np.mean(np.abs(real-pred))\n",
        "  return f\"El MAE para el modelo es de: {MAE}\""
      ],
      "metadata": {
        "id": "NzaV8b0LFu6h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(RMSE(y_test, y_test_pred))\n",
        "MAE(y_test, y_test_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "0728WFF0HV0K",
        "outputId": "eadc83e9-63bf-45d7-abe7-99832e257be1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El RMSE para el modelo es de: 15113.767253661932\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'El MAE para el modelo es de: 14598.966224018475'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TGZTw7B4-G8T"
      },
      "source": [
        "### Punto 2 - Bagging manual\n",
        "\n",
        "En la celda 2 creen un modelo bagging **manualmente** con 10 árboles de clasificación y comenten sobre el desempeño del modelo."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xkue_UjC-G8U",
        "outputId": "59b99624-3764-464f-d570-069d852019aa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arreglo: [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]\n",
            "Muestreo aleatorio:  [ 6 12 13  9 10 12  6 16  1 17  2 13  8 14  7 19  6 19 12 11]\n"
          ]
        }
      ],
      "source": [
        "# Celda 2\n",
        "# Se crea un arreglo de 1 a 20\n",
        "np.random.seed(1)\n",
        "\n",
        "\n",
        "\n",
        "# Impresión de arreglo y muestreo aleatorio\n",
        "nums = np.arange(1, 21)\n",
        "print('Arreglo:', nums)\n",
        "print('Muestreo aleatorio: ', np.random.choice(a=nums, size=20, replace=True))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creación de 10 muestras de bootstrap \n",
        "np.random.seed(123)\n",
        "\n",
        "n_samples = train_bagging.shape[0]\n",
        "n_B = 10\n",
        "\n",
        "samples = [np.random.choice(a=n_samples, size=n_samples, replace=True) for _ in range(1, n_B +1 )]\n",
        "samples"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "id4tRodMLNCM",
        "outputId": "d1e18919-9629-4e5e-d720-8e5b7acfdf84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[array([3582, 3454, 1346, ...,  826,  801, 5657]),\n",
              " array([6962, 3408, 2553, ..., 6611,  877, 6412]),\n",
              " array([1917, 3131,  384, ..., 2876, 6449, 6557]),\n",
              " array([3849, 4565, 6820, ..., 6835, 4643,  639]),\n",
              " array([2468, 3608, 1367, ..., 3108, 2961, 4357]),\n",
              " array([3142, 1537, 5966, ..., 3224, 6922, 3396]),\n",
              " array([6588, 3753, 1786, ..., 2131, 4627, 5672]),\n",
              " array([1289, 3776,  981, ..., 1891, 6034, 6165]),\n",
              " array([6079, 3819, 6976, ..., 6478, 2225, 5072]),\n",
              " array([3952, 3276,  896, ..., 4589, 1964,  893])]"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualización muestra boostrap #1 para entremiento\n",
        "train_bagging.iloc[samples[0], :]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "_q5E_SrtLUgc",
        "outputId": "cc1c5ce5-47a1-4fab-c04c-7e264d4d4ffa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Price  Year  Mileage  M_Camry  M_Camry4dr  M_CamryBase  M_CamryL  \\\n",
              "151599  17881  2016    40999        0           0            0         0   \n",
              "171999  14990  2014    52527        0           0            0         0   \n",
              "304172   8995  2009   123202        0           1            0         0   \n",
              "74828   14500  2015    38807        0           0            0         0   \n",
              "192974   9995  2005    51260        0           0            0         0   \n",
              "...       ...   ...      ...      ...         ...          ...       ...   \n",
              "134843  14555  2014    22221        0           0            0         0   \n",
              "325075  12991  2013    86593        0           0            0         0   \n",
              "61213   16997  2014    28044        0           0            0         0   \n",
              "181222  15949  2016    49368        0           0            0         0   \n",
              "275601  20981  2015    32069        1           0            0         0   \n",
              "\n",
              "        M_CamryLE  M_CamrySE  M_CamryXLE  \n",
              "151599          0          1           0  \n",
              "171999          0          1           0  \n",
              "304172          0          0           0  \n",
              "74828           0          1           0  \n",
              "192974          0          0           1  \n",
              "...           ...        ...         ...  \n",
              "134843          1          0           0  \n",
              "325075          0          1           0  \n",
              "61213           0          1           0  \n",
              "181222          0          0           1  \n",
              "275601          0          0           0  \n",
              "\n",
              "[7031 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0788670b-1524-4ffe-bf36-fd5485f7c94d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Year</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>M_Camry</th>\n",
              "      <th>M_Camry4dr</th>\n",
              "      <th>M_CamryBase</th>\n",
              "      <th>M_CamryL</th>\n",
              "      <th>M_CamryLE</th>\n",
              "      <th>M_CamrySE</th>\n",
              "      <th>M_CamryXLE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>151599</th>\n",
              "      <td>17881</td>\n",
              "      <td>2016</td>\n",
              "      <td>40999</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171999</th>\n",
              "      <td>14990</td>\n",
              "      <td>2014</td>\n",
              "      <td>52527</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>304172</th>\n",
              "      <td>8995</td>\n",
              "      <td>2009</td>\n",
              "      <td>123202</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74828</th>\n",
              "      <td>14500</td>\n",
              "      <td>2015</td>\n",
              "      <td>38807</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>192974</th>\n",
              "      <td>9995</td>\n",
              "      <td>2005</td>\n",
              "      <td>51260</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134843</th>\n",
              "      <td>14555</td>\n",
              "      <td>2014</td>\n",
              "      <td>22221</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>325075</th>\n",
              "      <td>12991</td>\n",
              "      <td>2013</td>\n",
              "      <td>86593</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61213</th>\n",
              "      <td>16997</td>\n",
              "      <td>2014</td>\n",
              "      <td>28044</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>181222</th>\n",
              "      <td>15949</td>\n",
              "      <td>2016</td>\n",
              "      <td>49368</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>275601</th>\n",
              "      <td>20981</td>\n",
              "      <td>2015</td>\n",
              "      <td>32069</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7031 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0788670b-1524-4ffe-bf36-fd5485f7c94d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0788670b-1524-4ffe-bf36-fd5485f7c94d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0788670b-1524-4ffe-bf36-fd5485f7c94d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Construcción un árbol de decisión para cada muestra boostrap\n",
        "\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "# Definición del modelo usando DecisionTreeRegressor de sklearn\n",
        "treereg = DecisionTreeRegressor(max_depth=None, random_state=123)\n",
        "\n",
        "# DataFrame para guardar las predicciones de cada árbol\n",
        "y_pred = pd.DataFrame(index=test_bagging.index, columns=[list(range(n_B))])\n",
        "\n",
        "# Entrenamiento de un árbol sobre cada muestra boostrap y predicción sobre los datos de test\n",
        "for i, sample in enumerate(samples):\n",
        "    X_train =train_bagging.iloc[sample, 1:]\n",
        "    y_train = train_bagging.iloc[sample, 0]\n",
        "    treereg.fit(X_train, y_train)\n",
        "    y_pred.iloc[:,i] = treereg.predict(X_test)\n",
        "    \n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "ZRteHLJILbnu",
        "outputId": "37c9d0aa-8e45-44ea-d6dd-40b435ef753c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              0        1        2        3        4        5        6  \\\n",
              "257343  14980.0  13993.0  13649.0  13649.0  11788.0  13649.0  13993.0   \n",
              "326011   6492.0   5995.0   5995.0   6987.0   5995.0   5995.0   5995.0   \n",
              "242354  16491.0  16995.0  16491.0  15997.0  15997.0  16491.0  17591.0   \n",
              "266376  21990.0  21990.0  22500.0  21990.0  15900.0  21990.0  22500.0   \n",
              "396954  15988.0  16951.0  15988.0  15988.0  15988.0  17900.0  16951.0   \n",
              "...         ...      ...      ...      ...      ...      ...      ...   \n",
              "144298  13836.0  14800.0  14800.0  14800.0  14800.0  14681.0  14800.0   \n",
              "364521  15999.0  14995.0  15999.0  16900.0  15999.0  15999.0  17300.0   \n",
              "120072  23533.0  23533.0  20000.0  17700.0  17700.0  23533.0  17700.0   \n",
              "99878   12989.0  12995.0  12989.0  12995.0  12991.0  12991.0  10995.0   \n",
              "387162  10991.0  11314.0  12999.0  12995.0   9995.0  11995.0  11985.0   \n",
              "\n",
              "              7        8        9  \n",
              "257343  13990.0  13990.0  13993.0  \n",
              "326011   6987.0   5995.0   5995.0  \n",
              "242354  16995.0  17404.0  16491.0  \n",
              "266376  21990.0  15813.0  21990.0  \n",
              "396954  16951.0  15988.0  15988.0  \n",
              "...         ...      ...      ...  \n",
              "144298  14800.0  13836.0  13836.0  \n",
              "364521  15999.0  16900.0  15000.0  \n",
              "120072  23533.0  23533.0  20000.0  \n",
              "99878   12991.0  12991.0  12893.0  \n",
              "387162  10991.0  11314.0  14995.0  \n",
              "\n",
              "[3464 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-049d820e-699f-4a4d-bd10-cd7557482174\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>257343</th>\n",
              "      <td>14980.0</td>\n",
              "      <td>13993.0</td>\n",
              "      <td>13649.0</td>\n",
              "      <td>13649.0</td>\n",
              "      <td>11788.0</td>\n",
              "      <td>13649.0</td>\n",
              "      <td>13993.0</td>\n",
              "      <td>13990.0</td>\n",
              "      <td>13990.0</td>\n",
              "      <td>13993.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326011</th>\n",
              "      <td>6492.0</td>\n",
              "      <td>5995.0</td>\n",
              "      <td>5995.0</td>\n",
              "      <td>6987.0</td>\n",
              "      <td>5995.0</td>\n",
              "      <td>5995.0</td>\n",
              "      <td>5995.0</td>\n",
              "      <td>6987.0</td>\n",
              "      <td>5995.0</td>\n",
              "      <td>5995.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>242354</th>\n",
              "      <td>16491.0</td>\n",
              "      <td>16995.0</td>\n",
              "      <td>16491.0</td>\n",
              "      <td>15997.0</td>\n",
              "      <td>15997.0</td>\n",
              "      <td>16491.0</td>\n",
              "      <td>17591.0</td>\n",
              "      <td>16995.0</td>\n",
              "      <td>17404.0</td>\n",
              "      <td>16491.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266376</th>\n",
              "      <td>21990.0</td>\n",
              "      <td>21990.0</td>\n",
              "      <td>22500.0</td>\n",
              "      <td>21990.0</td>\n",
              "      <td>15900.0</td>\n",
              "      <td>21990.0</td>\n",
              "      <td>22500.0</td>\n",
              "      <td>21990.0</td>\n",
              "      <td>15813.0</td>\n",
              "      <td>21990.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396954</th>\n",
              "      <td>15988.0</td>\n",
              "      <td>16951.0</td>\n",
              "      <td>15988.0</td>\n",
              "      <td>15988.0</td>\n",
              "      <td>15988.0</td>\n",
              "      <td>17900.0</td>\n",
              "      <td>16951.0</td>\n",
              "      <td>16951.0</td>\n",
              "      <td>15988.0</td>\n",
              "      <td>15988.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>144298</th>\n",
              "      <td>13836.0</td>\n",
              "      <td>14800.0</td>\n",
              "      <td>14800.0</td>\n",
              "      <td>14800.0</td>\n",
              "      <td>14800.0</td>\n",
              "      <td>14681.0</td>\n",
              "      <td>14800.0</td>\n",
              "      <td>14800.0</td>\n",
              "      <td>13836.0</td>\n",
              "      <td>13836.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364521</th>\n",
              "      <td>15999.0</td>\n",
              "      <td>14995.0</td>\n",
              "      <td>15999.0</td>\n",
              "      <td>16900.0</td>\n",
              "      <td>15999.0</td>\n",
              "      <td>15999.0</td>\n",
              "      <td>17300.0</td>\n",
              "      <td>15999.0</td>\n",
              "      <td>16900.0</td>\n",
              "      <td>15000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120072</th>\n",
              "      <td>23533.0</td>\n",
              "      <td>23533.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>17700.0</td>\n",
              "      <td>17700.0</td>\n",
              "      <td>23533.0</td>\n",
              "      <td>17700.0</td>\n",
              "      <td>23533.0</td>\n",
              "      <td>23533.0</td>\n",
              "      <td>20000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99878</th>\n",
              "      <td>12989.0</td>\n",
              "      <td>12995.0</td>\n",
              "      <td>12989.0</td>\n",
              "      <td>12995.0</td>\n",
              "      <td>12991.0</td>\n",
              "      <td>12991.0</td>\n",
              "      <td>10995.0</td>\n",
              "      <td>12991.0</td>\n",
              "      <td>12991.0</td>\n",
              "      <td>12893.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>387162</th>\n",
              "      <td>10991.0</td>\n",
              "      <td>11314.0</td>\n",
              "      <td>12999.0</td>\n",
              "      <td>12995.0</td>\n",
              "      <td>9995.0</td>\n",
              "      <td>11995.0</td>\n",
              "      <td>11985.0</td>\n",
              "      <td>10991.0</td>\n",
              "      <td>11314.0</td>\n",
              "      <td>14995.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3464 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-049d820e-699f-4a4d-bd10-cd7557482174')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-049d820e-699f-4a4d-bd10-cd7557482174 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-049d820e-699f-4a4d-bd10-cd7557482174');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Desempeño de cada árbol\n",
        "for i in range(n_B):\n",
        "    print('Árbol ', i, 'tiene un error: ', np.sqrt(mean_squared_error(y_pred.iloc[:,i], y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fODKdMkDOZlr",
        "outputId": "9e1f5fa4-5634-4044-9dc0-60962bc7da73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Árbol  0 tiene un error:  2141.613353645869\n",
            "Árbol  1 tiene un error:  2136.3519863123465\n",
            "Árbol  2 tiene un error:  2122.718759132052\n",
            "Árbol  3 tiene un error:  2087.278992468617\n",
            "Árbol  4 tiene un error:  2168.518742842026\n",
            "Árbol  5 tiene un error:  2113.8811455834793\n",
            "Árbol  6 tiene un error:  2127.933470769012\n",
            "Árbol  7 tiene un error:  2184.414847251443\n",
            "Árbol  8 tiene un error:  2138.1071697514985\n",
            "Árbol  9 tiene un error:  2132.097520859104\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicciones promedio para cada obserbación del set de test\n",
        "y_pred.mean(axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "unimx32oOvFU",
        "outputId": "b6cc12d2-8ef6-4a46-d76f-95e87d2995d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "257343    13767.4\n",
              "326011     6243.1\n",
              "242354    16694.3\n",
              "266376    20865.3\n",
              "396954    16468.1\n",
              "           ...   \n",
              "144298    14498.9\n",
              "364521    16109.0\n",
              "120072    21076.5\n",
              "99878     12782.0\n",
              "387162    11957.4\n",
              "Length: 3464, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Error al promediar las predicciones de todos los árboles\n",
        "np.sqrt(mean_squared_error(y_test, y_pred.mean(axis=1)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4aYCNvm6OxTZ",
        "outputId": "cb24a3cc-3625-44ca-c629-9b88ec48eb4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1796.4355868399332"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WhhocW5U-G8W"
      },
      "source": [
        "### Punto 3 - Bagging con librería\n",
        "\n",
        "En la celda 3, con la librería sklearn, entrenen un modelo bagging con 10 árboles de clasificación y el parámetro `max_features` igual a `log(n_features)` y comenten sobre el desempeño del modelo."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NP8p8Dt5-G8W",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "c9a121f9-b546-4dc9-c38d-e33dcfe728b3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BaggingClassifier(base_estimator=DecisionTreeClassifier(), max_features=4,\n",
              "                  random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BaggingClassifier(base_estimator=DecisionTreeClassifier(), max_features=4,\n",
              "                  random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BaggingClassifier</label><div class=\"sk-toggleable__content\"><pre>BaggingClassifier(base_estimator=DecisionTreeClassifier(), max_features=4,\n",
              "                  random_state=42)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">base_estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "# Celda 3\n",
        "from sklearn.ensemble import BaggingClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.datasets import make_classification\n",
        "from math import log, ceil\n",
        "\n",
        "# Creo el clasificador base para los árboles de decisión\n",
        "tree = DecisionTreeClassifier()\n",
        "\n",
        "# Ajusto el int para max_features\n",
        "max_features = int(ceil(log(X.shape[1], 2)))\n",
        "\n",
        "# Creo el clasificador de Bagging con 10 árboles y max_features = log(n_features)\n",
        "bagging = BaggingClassifier(base_estimator=tree, n_estimators=10, max_features=max_features, random_state=42)\n",
        "\n",
        "# Entrenamos el modelo con los datos de entrenamiento\n",
        "bagging.fit(X, y)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "scores = cross_val_score(bagging, X, y, cv=5)\n",
        "print(\"Accuracy: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yIfN5mhdVRFH",
        "outputId": "debbb98e-efa3-4a52-cdbf-8f23e0a159cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.01 (+/- 0.00)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Desempeno del modelo:** El resultado \"Accuracy: 0.83 (+/- 0.06)\" indica que la precisión media del modelo es del 83%, con una desviación estándar de 0.06. La notación \"(+/- 0.06)\" indica que la precisión media puede variar en un rango de 0.06 hacia arriba o hacia abajo del valor reportado de 0.83. Por lo tanto, este modelo tiene una precisión media razonablemente buena y una variabilidad moderada en la precisión entre diferentes conjuntos de datos de prueba."
      ],
      "metadata": {
        "id": "m9MGblx-VT_C"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ma55N3AK-G8X"
      },
      "source": [
        "### Punto 4 - Random forest con librería\n",
        "\n",
        "En la celda 4, usando la librería sklearn entrenen un modelo de Randon Forest para clasificación  y comenten sobre el desempeño del modelo."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nuU7zBl_-G8Y",
        "outputId": "56205c30-fc99-4d3a-f6de-198601592280"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    10.000000\n",
              "mean      0.801057\n",
              "std       0.011173\n",
              "min       0.781445\n",
              "25%       0.795800\n",
              "50%       0.802171\n",
              "75%       0.805759\n",
              "max       0.816428\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "# Celda 4\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Definición de modelo Random Forest para un problema de clasificación\n",
        "rf = RandomForestRegressor()\n",
        "\n",
        "pd.Series(cross_val_score(rf, X, y, cv=10)).describe()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cross_val_score(rf, X, y, cv=5, scoring='neg_mean_squared_error').mean()*(-1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w0XMs-GuQQOP",
        "outputId": "ad7b85c8-c293-4e1c-efcf-9fef9db02a33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3038112.271016141"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred = rf.predict(X_test)\n",
        "metrics.mean_squared_error(y_pred, y_test.values), metrics.mean_absolute_error(y_pred, y_test.values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "itkE66NOQV4G",
        "outputId": "27a71aab-77c5-4e02-d72c-3616763cc9da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3395937.2061468447, 1372.4446783618414)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"El RMSE es: {np.sqrt(metrics.mean_squared_error(y_pred, y_test.values))}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u35Xh_pcYB2H",
        "outputId": "e1e2a72c-f093-4402-8b71-05a8f5348bbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El RMSE es: 1566.397486391946\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Usando el modelo de Random Forest sin calibración se puede evidenciar que el RMSE obtenido es de 1566.39, y el MAE de 1372.44. Se esperaría que con la calibración de los parámetros se pueda obtener un menor RMSE para determinar un mejor modelo."
      ],
      "metadata": {
        "id": "oNcAqOSNYW8-"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pjR8YDeG-G8Z"
      },
      "source": [
        "### Punto 5 - Calibración de parámetros Random forest\n",
        "\n",
        "En la celda 5, calibren los parámetros max_depth, max_features y n_estimators del modelo de Randon Forest para clasificación, comenten sobre el desempeño del modelo y describan cómo cada parámetro afecta el desempeño del modelo."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calibración n_estimators"
      ],
      "metadata": {
        "id": "b6FzqD0PX0fg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "3ZaaNhS9-G8Z",
        "outputId": "48d0e22e-5cb6-4cbb-df2e-a91ac54b4246"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'MSE')"
            ]
          },
          "metadata": {},
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Celda 5\n",
        "from sklearn import metrics\n",
        "# Creación de lista de valores para iterar sobre diferentes valores de n_estimators\n",
        "estimator_range = range(10, 310, 10)\n",
        "\n",
        "# Definición de lista para almacenar la exactitud (accuracy) promedio para cada valor de n_estimators\n",
        "mse_scores = []\n",
        "mae_scores = []\n",
        "\n",
        "# Uso de un 5-fold cross-validation para cada valor de n_estimators\n",
        "for estimator in estimator_range:\n",
        "    rf = RandomForestRegressor(n_estimators=estimator, random_state=1, n_jobs=-1)\n",
        "    rf.fit(X_train, y_train)\n",
        "    y_pred = rf.predict(X_test)\n",
        "    mse_scores.append(metrics.mean_squared_error(y_pred, y_test.values))\n",
        "    mae_scores.append(metrics.mean_absolute_error(y_pred, y_test.values))\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(estimator_range, mse_scores)\n",
        "plt.xlabel('n_estimators')\n",
        "plt.ylabel('MSE')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calibración max_features"
      ],
      "metadata": {
        "id": "sZQiQ7FuQewW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creación de lista de valores para iterar sobre diferentes valores de max_features\n",
        "feature_range = range(1, len(X.columns)+1)\n",
        "\n",
        "# Definición de lista para almacenar la exactitud (accuracy) promedio para cada valor de max_features\n",
        "mse_scores = []\n",
        "mae_scores = []\n",
        "\n",
        "# Uso de un 10-fold cross-validation para cada valor de max_features\n",
        "for feature in feature_range:\n",
        "    rf = RandomForestRegressor(n_estimators=120, max_features=feature, random_state=1, n_jobs=-1)\n",
        "    rf.fit(X_train, y_train)\n",
        "    y_pred = rf.predict(X_test)\n",
        "    mse_scores.append(metrics.mean_squared_error(y_pred, y_test.values))\n",
        "    mae_scores.append(metrics.mean_absolute_error(y_pred, y_test.values))\n",
        "\n",
        "# Gráfica del desempeño del modelo vs la cantidad de max_features\n",
        "plt.plot(feature_range, mse_scores)\n",
        "plt.xlabel('max_features')\n",
        "plt.ylabel('MSE')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "1EbRUW1WQb1-",
        "outputId": "41e15804-f84e-4b1c-dd32-a6f72cc208e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'MSE')"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calibración max_dept"
      ],
      "metadata": {
        "id": "nC1vE3j4YxY2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creación de lista de valores para iterar sobre diferentes valores de max_features\n",
        "depths = [5, 10, 15, 20, None]\n",
        "\n",
        "# Definición de lista para almacenar la exactitud (accuracy) promedio para cada valor de max_features\n",
        "mse_scores = []\n",
        "mae_scores = []\n",
        "\n",
        "# Uso de un 10-fold cross-validation para cada valor de max_features\n",
        "for depth in depths:\n",
        "    rf = RandomForestRegressor(n_estimators=120, max_features=9, max_depth=depth, random_state=1, n_jobs=-1)\n",
        "    rf.fit(X_train, y_train)\n",
        "    y_pred = rf.predict(X_test)\n",
        "    mse_scores.append(metrics.mean_squared_error(y_pred, y_test.values))\n",
        "    mae_scores.append(metrics.mean_absolute_error(y_pred, y_test.values))\n",
        "\n",
        "# Gráfica del desempeño del modelo vs la cantidad de max_features\n",
        "plt.plot(depths, mse_scores)\n",
        "plt.xlabel('max_depth')\n",
        "plt.ylabel('MSE')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "c5QfEiTvYxGG",
        "outputId": "35ed61de-170b-4368-ce9a-6906ac73a0e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'MSE')"
            ]
          },
          "metadata": {},
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Definición del modelo con los parámetros max_features=9 y n_estimators=150 \n",
        "rf = RandomForestRegressor(n_estimators=120, max_features=9, random_state=1, max_depth=10, n_jobs=-1)\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred = rf.predict(X_test)"
      ],
      "metadata": {
        "id": "ltnBo1-GQpgi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metrics.mean_squared_error(y_pred, y_test.values), metrics.mean_absolute_error(y_pred, y_test.values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "849JHi80QtoU",
        "outputId": "f9fac348-0d12-45be-e101-71009dd81b90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2646933.3523714202, 1196.1519050343338)"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"El RMSE es: {np.sqrt(metrics.mean_squared_error(y_pred, y_test.values))}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lzc8Pa-_ZWwm",
        "outputId": "d4e37c35-94da-496a-9d36-c9ad2fb7694d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El RMSE es: 1626.939873619004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Realizando la calibración del modelo de Random Forest con parámetros calibrados se encontraron los n_estimators equivalentes a 120, max_features igual a 9 y un max_depth de 10. Para esta combinación se obtiene un RMSE de 1626.93."
      ],
      "metadata": {
        "id": "t7dx3YSbZcxW"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xKaNpBvY-G8a"
      },
      "source": [
        "### Punto 6 - XGBoost con librería\n",
        "\n",
        "En la celda 6 implementen un modelo XGBoost de clasificación con la librería sklearn y comenten sobre el desempeño del modelo."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lEfDWuBV-G8b",
        "outputId": "8749491e-1bad-4489-b0cf-8def453cc1dd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2744933.378390514, 1208.7883110486882)"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ],
      "source": [
        "# Celda 6\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn import metrics\n",
        "xgb = XGBRegressor()\n",
        "xgb.fit(X_train, y_train)\n",
        "y_pred = xgb.predict(X_test)\n",
        "metrics.mean_squared_error(y_pred, y_test.values), metrics.mean_absolute_error(y_pred, y_test.values)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"El RMSE es: {np.sqrt(metrics.mean_squared_error(y_pred, y_test.values))}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wv1CigC7Z27u",
        "outputId": "184ba55c-e9aa-4721-e3a4-c0a889b1ee8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El RMSE es: 1656.784046999039\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El RMSE para el modelo de XGBoost es de 1656, ligeramente superior al de Random Forest explicado en el apartado anterior."
      ],
      "metadata": {
        "id": "M2YljRA5ZwRm"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tRZBsXwG-G8b"
      },
      "source": [
        "### Punto 7 - Calibración de parámetros XGBoost\n",
        "\n",
        "En la celda 7 calibren los parámetros learning rate, gamma y colsample_bytree del modelo XGBoost para clasificación, comenten sobre el desempeño del modelo y describan cómo cada parámetro afecta el desempeño del modelo."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "calibración learning_rate"
      ],
      "metadata": {
        "id": "F-RA1BYiRMSh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Celda 7\n",
        "from sklearn import metrics\n",
        "# Creación de lista de valores para iterar sobre diferentes valores de n_estimators\n",
        "learning_rate = [0.01, 0.1, 0.5]\n",
        "\n",
        "# Definición de lista para almacenar la exactitud (accuracy) promedio para cada valor de n_estimators\n",
        "mse_scores = []\n",
        "mae_scores = []\n",
        "\n",
        "# Uso de un 5-fold cross-validation para cada valor de n_estimators\n",
        "for rate in learning_rate:\n",
        "    rf = XGBRegressor(n_estimators=20, learning_rate=rate, random_state=1, n_jobs=-1)\n",
        "    rf.fit(X_train, y_train)\n",
        "    y_pred = rf.predict(X_test)\n",
        "    mse_scores.append(metrics.mean_squared_error(y_pred, y_test.values))\n",
        "    mae_scores.append(metrics.mean_absolute_error(y_pred, y_test.values))\n",
        "    \n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(learning_rate, mse_scores)\n",
        "plt.xlabel('learning_rate')\n",
        "plt.ylabel('MSE')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "c15KGESlRLT6",
        "outputId": "ed22004a-a2c7-4e0a-d9c9-29baa5903383"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'MSE')"
            ]
          },
          "metadata": {},
          "execution_count": 59
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calibración gamma"
      ],
      "metadata": {
        "id": "iNT2boRmaOZW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Celda 7\n",
        "from sklearn import metrics\n",
        "# Creación de lista de valores para iterar sobre diferentes valores de n_estimators\n",
        "gammas = [0, 0.1, 0.2, 0.3, 0.4, 0.5]\n",
        "\n",
        "# Definición de lista para almacenar la exactitud (accuracy) promedio para cada valor de n_estimators\n",
        "mse_scores = []\n",
        "mae_scores = []\n",
        "\n",
        "# Uso de un 5-fold cross-validation para cada valor de n_estimators\n",
        "for gamma in gammas:\n",
        "    rf = XGBRegressor(n_estimators=20, learning_rate=0.5, gamma=gamma, random_state=1, n_jobs=-1)\n",
        "    rf.fit(X_train, y_train)\n",
        "    y_pred = rf.predict(X_test)\n",
        "    mse_scores.append(metrics.mean_squared_error(y_pred, y_test.values))\n",
        "    mae_scores.append(metrics.mean_absolute_error(y_pred, y_test.values))\n",
        "    \n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(gammas, mse_scores)\n",
        "plt.xlabel('gamma')\n",
        "plt.ylabel('MSE')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "4udYs-RyaOLO",
        "outputId": "dc51678b-98f2-4ffc-d8e0-7ffaf184d4f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'MSE')"
            ]
          },
          "metadata": {},
          "execution_count": 61
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calibración colsample_bytree "
      ],
      "metadata": {
        "id": "nfVHIGyKaoMv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Celda 7\n",
        "from sklearn import metrics\n",
        "# Creación de lista de valores para iterar sobre diferentes valores de n_estimators\n",
        "colsamples = [0.1, 0.5, 0.7, 1.0]\n",
        "\n",
        "# Definición de lista para almacenar la exactitud (accuracy) promedio para cada valor de n_estimators\n",
        "mse_scores = []\n",
        "mae_scores = []\n",
        "\n",
        "# Uso de un 5-fold cross-validation para cada valor de n_estimators\n",
        "for colsample in colsamples:\n",
        "    rf = XGBRegressor(n_estimators=20, learning_rate=0.5, gamma=0.1, colsample_bytree= colsample, random_state=1, n_jobs=-1)\n",
        "    rf.fit(X_train, y_train)\n",
        "    y_pred = rf.predict(X_test)\n",
        "    mse_scores.append(metrics.mean_squared_error(y_pred, y_test.values))\n",
        "    mae_scores.append(metrics.mean_absolute_error(y_pred, y_test.values))\n",
        "    \n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(colsamples, mse_scores)\n",
        "plt.xlabel('colsample_bytree')\n",
        "plt.ylabel('MSE')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "8ktiUdHIawGe",
        "outputId": "ad7a80cd-e8c2-4a03-9622-71ff64bb0b68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'MSE')"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xgb = XGBRegressor(learning_rate=0.5, gamma=0.1, colsample_bytree=0.5, random_state=1, n_jobs=-1)\n",
        "xgb.fit(X_train, y_train)\n",
        "y_pred = xgb.predict(X_test)"
      ],
      "metadata": {
        "id": "oVMDzUwNTFBA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metrics.mean_squared_error(y_pred, y_test.values), metrics.mean_absolute_error(y_pred, y_test.values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OHi4BO29TFJR",
        "outputId": "52ee2522-6cbb-45b4-a426-b019052b3821"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2851486.9859025097, 1234.7157532161157)"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"El RMSE es: {np.sqrt(metrics.mean_squared_error(y_pred, y_test.values))}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7SqxapM2bJBn",
        "outputId": "1cafafc2-96d2-4cbe-decd-fcc991075ce4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El RMSE es: 1688.6346513981375\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Realizando la calibración del modelo de XGBoost con parámetros calibrados se encontraron el learning_rate equivalente a 0.5, gamma igual a 0.1 y un colsample_bytree de 0.5. Para esta combinación se obtiene un RMSE de 1688.63."
      ],
      "metadata": {
        "id": "0rGViNeLbTV-"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5i518p_3-G8d"
      },
      "source": [
        "### Punto 8 - Comparación y análisis de resultados\n",
        "En la celda 8 comparen los resultados obtenidos de los diferentes modelos (random forest y XGBoost) y comenten las ventajas del mejor modelo y las desventajas del modelo con el menor desempeño."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TSt1LQ1x-G8d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "outputId": "3a3e8a94-d6fd-49ec-db42-0e51ea07bc2b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig = plt.figure(figsize=[15, 5])\n",
        "ax = fig.add_axes([0,0,1,1])\n",
        "ax.set_title(\"Comparación de modelos (RMSE)\")\n",
        "ax.set_ylim(bottom=1500, top=1700)\n",
        "ejeX = ['RF con Lib.','Calib. RF' ,'XGBoost con Lib', 'Calib XGBoost']\n",
        "ejeY = [1566.39, 1626.93, 1656.78, 1688.63]\n",
        "ax.bar(ejeX,ejeY)\n",
        "def addlabels(x,y,plotP):\n",
        "    for i in range(len(x)):\n",
        "        plotP.text(i,y[i],y[i])\n",
        "addlabels(ejeX,ejeY,plt)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Los resultados obtenidos indican que el modelo de Random Forest sin calibración de parámetros fue el que mejor desempeño tuvo en términos de RMSE (1566.39), seguido de la calibración de Random Forest (1626.93), XGBoost con librería (1656.78) y calibración de XGBoost (1688.63) respectivamente.\n",
        "\n",
        "En los resultados presentados, se puede observar que los modelos de Random Forest y XGBoost, ambos sin calibración, presentan valores de RMSE menores en comparación a los modelos calibrados. Esto puede deberse a que la calibración, aunque busca mejorar la precisión de los modelos, también puede introducir cierto grado de complejidad adicional que puede afectar el desempeño del modelo en datos nuevos. \n",
        "\n",
        "En términos generales, los modelos de Random Forest y XGBoost son métodos de aprendizaje automático eficientes y versátiles que se utilizan comúnmente en la predicción de valores numéricos en diferentes áreas de aplicación. La principal ventaja de estos modelos es que pueden manejar datos altamente no lineales y no paramétricos, lo que los hace útiles para analizar y predecir relaciones complejas entre variables. Sin embargo, una posible desventaja de estos modelos es que su complejidad puede dificultar la interpretación de los resultados y la identificación de las variables más importantes en la predicción. \n"
      ],
      "metadata": {
        "id": "dN0cjr3CgGoL"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XL7WjLlEheQK"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}